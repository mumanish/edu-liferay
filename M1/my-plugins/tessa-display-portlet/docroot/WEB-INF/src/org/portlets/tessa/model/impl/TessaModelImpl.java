/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.portlets.tessa.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.portlets.tessa.model.Tessa;
import org.portlets.tessa.model.TessaModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

/**
 * The base model implementation for the Tessa service. Represents a row in the &quot;Tessa_Tessa&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.portlets.tessa.model.TessaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TessaImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a tessa model instance should use the {@link org.portlets.tessa.model.Tessa} interface instead.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TessaImpl
 * @see org.portlets.tessa.model.Tessa
 * @see org.portlets.tessa.model.TessaModel
 * @generated
 */
public class TessaModelImpl extends BaseModelImpl<Tessa> implements TessaModel {
	public static final String TABLE_NAME = "Tessa_Tessa";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", new Integer(Types.VARCHAR) },
			{ "tessaId", new Integer(Types.BIGINT) },
			{ "tessaText", new Integer(Types.VARCHAR) },
			{ "companyId", new Integer(Types.BIGINT) },
			{ "groupId", new Integer(Types.BIGINT) },
			{ "userId", new Integer(Types.BIGINT) }
		};
	public static final String TABLE_SQL_CREATE = "create table Tessa_Tessa (uuid_ VARCHAR(75) null,tessaId LONG not null primary key,tessaText VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Tessa_Tessa";
	public static final String ORDER_BY_JPQL = " ORDER BY tessa.tessaId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Tessa_Tessa.tessaId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.portlets.tessa.model.Tessa"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.portlets.tessa.model.Tessa"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.portlets.tessa.model.Tessa"));

	public TessaModelImpl() {
	}

	public long getPrimaryKey() {
		return _tessaId;
	}

	public void setPrimaryKey(long pk) {
		setTessaId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_tessaId);
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getTessaId() {
		return _tessaId;
	}

	public void setTessaId(long tessaId) {
		_tessaId = tessaId;
	}

	public String getTessaText() {
		if (_tessaText == null) {
			return StringPool.BLANK;
		}
		else {
			return _tessaText;
		}
	}

	public void setTessaText(String tessaText) {
		_tessaText = tessaText;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public Tessa toEscapedModel() {
		if (isEscapedModel()) {
			return (Tessa)this;
		}
		else {
			return (Tessa)Proxy.newProxyInstance(Tessa.class.getClassLoader(),
				new Class[] { Tessa.class }, new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					Tessa.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		TessaImpl tessaImpl = new TessaImpl();

		tessaImpl.setUuid(getUuid());

		TessaModelImpl tessaModelImpl = tessaImpl;

		tessaModelImpl._originalUuid = tessaModelImpl._uuid;

		tessaImpl.setTessaId(getTessaId());

		tessaImpl.setTessaText(getTessaText());

		tessaImpl.setCompanyId(getCompanyId());

		tessaImpl.setGroupId(getGroupId());

		tessaModelImpl._originalGroupId = tessaModelImpl._groupId;

		tessaModelImpl._setOriginalGroupId = false;
		tessaImpl.setUserId(getUserId());

		return tessaImpl;
	}

	public int compareTo(Tessa tessa) {
		int value = 0;

		if (getTessaId() < tessa.getTessaId()) {
			value = -1;
		}
		else if (getTessaId() > tessa.getTessaId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Tessa tessa = null;

		try {
			tessa = (Tessa)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = tessa.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", tessaId=");
		sb.append(getTessaId());
		sb.append(", tessaText=");
		sb.append(getTessaText());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("org.portlets.tessa.model.Tessa");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tessaId</column-name><column-value><![CDATA[");
		sb.append(getTessaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tessaText</column-name><column-value><![CDATA[");
		sb.append(getTessaText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private String _uuid;
	private String _originalUuid;
	private long _tessaId;
	private String _tessaText;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private transient ExpandoBridge _expandoBridge;
}