/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.portlets.lia.mine.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.portlets.lia.mine.model.IRIssue;
import org.portlets.lia.mine.model.IRIssueModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

/**
 * The base model implementation for the IRIssue service. Represents a row in the &quot;IR_IRIssue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.portlets.lia.mine.model.IRIssueModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IRIssueImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a i r issue model instance should use the {@link org.portlets.lia.mine.model.IRIssue} interface instead.
 * </p>
 *
 * @author Vladimir Frolov
 * @see IRIssueImpl
 * @see org.portlets.lia.mine.model.IRIssue
 * @see org.portlets.lia.mine.model.IRIssueModel
 * @generated
 */
public class IRIssueModelImpl extends BaseModelImpl<IRIssue>
	implements IRIssueModel {
	public static final String TABLE_NAME = "IR_IRIssue";
	public static final Object[][] TABLE_COLUMNS = {
			{ "issueId", new Integer(Types.BIGINT) },
			{ "summary", new Integer(Types.VARCHAR) },
			{ "requester", new Integer(Types.VARCHAR) },
			{ "priority", new Integer(Types.VARCHAR) }
		};
	public static final String TABLE_SQL_CREATE = "create table IR_IRIssue (issueId LONG not null primary key,summary VARCHAR(75) null,requester VARCHAR(75) null,priority VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table IR_IRIssue";
	public static final String ORDER_BY_JPQL = " ORDER BY irIssue.requester ASC";
	public static final String ORDER_BY_SQL = " ORDER BY IR_IRIssue.requester ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.portlets.lia.mine.model.IRIssue"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.portlets.lia.mine.model.IRIssue"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.portlets.lia.mine.model.IRIssue"));

	public IRIssueModelImpl() {
	}

	public long getPrimaryKey() {
		return _issueId;
	}

	public void setPrimaryKey(long pk) {
		setIssueId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_issueId);
	}

	public long getIssueId() {
		return _issueId;
	}

	public void setIssueId(long issueId) {
		_issueId = issueId;
	}

	public String getSummary() {
		if (_summary == null) {
			return StringPool.BLANK;
		}
		else {
			return _summary;
		}
	}

	public void setSummary(String summary) {
		_summary = summary;
	}

	public String getRequester() {
		if (_requester == null) {
			return StringPool.BLANK;
		}
		else {
			return _requester;
		}
	}

	public void setRequester(String requester) {
		_requester = requester;
	}

	public String getPriority() {
		if (_priority == null) {
			return StringPool.BLANK;
		}
		else {
			return _priority;
		}
	}

	public void setPriority(String priority) {
		_priority = priority;
	}

	public IRIssue toEscapedModel() {
		if (isEscapedModel()) {
			return (IRIssue)this;
		}
		else {
			return (IRIssue)Proxy.newProxyInstance(IRIssue.class.getClassLoader(),
				new Class[] { IRIssue.class }, new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					IRIssue.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		IRIssueImpl irIssueImpl = new IRIssueImpl();

		irIssueImpl.setIssueId(getIssueId());

		irIssueImpl.setSummary(getSummary());

		irIssueImpl.setRequester(getRequester());

		irIssueImpl.setPriority(getPriority());

		return irIssueImpl;
	}

	public int compareTo(IRIssue irIssue) {
		int value = 0;

		value = getRequester().compareTo(irIssue.getRequester());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		IRIssue irIssue = null;

		try {
			irIssue = (IRIssue)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = irIssue.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{issueId=");
		sb.append(getIssueId());
		sb.append(", summary=");
		sb.append(getSummary());
		sb.append(", requester=");
		sb.append(getRequester());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.portlets.lia.mine.model.IRIssue");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>issueId</column-name><column-value><![CDATA[");
		sb.append(getIssueId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summary</column-name><column-value><![CDATA[");
		sb.append(getSummary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requester</column-name><column-value><![CDATA[");
		sb.append(getRequester());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _issueId;
	private String _summary;
	private String _requester;
	private String _priority;
	private transient ExpandoBridge _expandoBridge;
}