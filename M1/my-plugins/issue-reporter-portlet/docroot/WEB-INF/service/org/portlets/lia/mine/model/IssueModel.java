/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.portlets.lia.mine.model;

import com.liferay.portal.kernel.annotation.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Issue service. Represents a row in the &quot;Reporter_Issue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.portlets.lia.mine.model.impl.IssueModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.portlets.lia.mine.model.impl.IssueImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this interface directly. All methods that expect a issue model instance should use the {@link Issue} interface instead.
 * </p>
 *
 * @author Vladimir Frolov
 * @see Issue
 * @see org.portlets.lia.mine.model.impl.IssueImpl
 * @see org.portlets.lia.mine.model.impl.IssueModelImpl
 * @generated
 */
public interface IssueModel extends BaseModel<Issue> {
	/**
	 * Gets the primary key of this issue.
	 *
	 * @return the primary key of this issue
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this issue
	 *
	 * @param pk the primary key of this issue
	 */
	public void setPrimaryKey(long pk);

	/**
	 * Gets the issue id of this issue.
	 *
	 * @return the issue id of this issue
	 */
	public long getIssueId();

	/**
	 * Sets the issue id of this issue.
	 *
	 * @param issueId the issue id of this issue
	 */
	public void setIssueId(long issueId);

	/**
	 * Gets the group id of this issue.
	 *
	 * @return the group id of this issue
	 */
	public long getGroupId();

	/**
	 * Sets the group id of this issue.
	 *
	 * @param groupId the group id of this issue
	 */
	public void setGroupId(long groupId);

	/**
	 * Gets the company id of this issue.
	 *
	 * @return the company id of this issue
	 */
	public long getCompanyId();

	/**
	 * Sets the company id of this issue.
	 *
	 * @param companyId the company id of this issue
	 */
	public void setCompanyId(long companyId);

	/**
	 * Gets the user id of this issue.
	 *
	 * @return the user id of this issue
	 */
	public long getUserId();

	/**
	 * Sets the user id of this issue.
	 *
	 * @param userId the user id of this issue
	 */
	public void setUserId(long userId);

	/**
	 * Gets the user uuid of this issue.
	 *
	 * @return the user uuid of this issue
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this issue.
	 *
	 * @param userUuid the user uuid of this issue
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Gets the user name of this issue.
	 *
	 * @return the user name of this issue
	 */
	@AutoEscape
	public String getUserName();

	/**
	 * Sets the user name of this issue.
	 *
	 * @param userName the user name of this issue
	 */
	public void setUserName(String userName);

	/**
	 * Gets the create date of this issue.
	 *
	 * @return the create date of this issue
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this issue.
	 *
	 * @param createDate the create date of this issue
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Gets the modified date of this issue.
	 *
	 * @return the modified date of this issue
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this issue.
	 *
	 * @param modifiedDate the modified date of this issue
	 */
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Gets the summary of this issue.
	 *
	 * @return the summary of this issue
	 */
	@AutoEscape
	public String getSummary();

	/**
	 * Sets the summary of this issue.
	 *
	 * @param summary the summary of this issue
	 */
	public void setSummary(String summary);

	/**
	 * Gets the requester of this issue.
	 *
	 * @return the requester of this issue
	 */
	@AutoEscape
	public String getRequester();

	/**
	 * Sets the requester of this issue.
	 *
	 * @param requester the requester of this issue
	 */
	public void setRequester(String requester);

	/**
	 * Gets the priority of this issue.
	 *
	 * @return the priority of this issue
	 */
	@AutoEscape
	public String getPriority();

	/**
	 * Sets the priority of this issue.
	 *
	 * @param priority the priority of this issue
	 */
	public void setPriority(String priority);

	/**
	 * Gets the description of this issue.
	 *
	 * @return the description of this issue
	 */
	@AutoEscape
	public String getDescription();

	/**
	 * Sets the description of this issue.
	 *
	 * @param description the description of this issue
	 */
	public void setDescription(String description);

	/**
	 * Gets the assignee of this issue.
	 *
	 * @return the assignee of this issue
	 */
	@AutoEscape
	public String getAssignee();

	/**
	 * Sets the assignee of this issue.
	 *
	 * @param assignee the assignee of this issue
	 */
	public void setAssignee(String assignee);

	/**
	 * Gets the statusx of this issue.
	 *
	 * @return the statusx of this issue
	 */
	@AutoEscape
	public String getStatusx();

	/**
	 * Sets the statusx of this issue.
	 *
	 * @param statusx the statusx of this issue
	 */
	public void setStatusx(String statusx);

	/**
	 * Gets the status of this issue.
	 *
	 * @return the status of this issue
	 */
	public int getStatus();

	/**
	 * Sets the status of this issue.
	 *
	 * @param status the status of this issue
	 */
	public void setStatus(int status);

	/**
	 * Gets the status by user id of this issue.
	 *
	 * @return the status by user id of this issue
	 */
	public long getStatusByUserId();

	/**
	 * Sets the status by user id of this issue.
	 *
	 * @param statusByUserId the status by user id of this issue
	 */
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Gets the status by user uuid of this issue.
	 *
	 * @return the status by user uuid of this issue
	 * @throws SystemException if a system exception occurred
	 */
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this issue.
	 *
	 * @param statusByUserUuid the status by user uuid of this issue
	 */
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Gets the status by user name of this issue.
	 *
	 * @return the status by user name of this issue
	 */
	@AutoEscape
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this issue.
	 *
	 * @param statusByUserName the status by user name of this issue
	 */
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Gets the status date of this issue.
	 *
	 * @return the status date of this issue
	 */
	public Date getStatusDate();

	/**
	 * Sets the status date of this issue.
	 *
	 * @param statusDate the status date of this issue
	 */
	public void setStatusDate(Date statusDate);

	/**
	 * Determines if this issue is approved.
	 *
	 * @return <code>true</code> if this issue is approved; <code>false</code> otherwise
	 */
	public boolean isApproved();

	/**
	 * Determines if this issue is a draft.
	 *
	 * @return <code>true</code> if this issue is a draft; <code>false</code> otherwise
	 */
	public boolean isDraft();

	/**
	 * Determines if this issue is expired.
	 *
	 * @return <code>true</code> if this issue is expired; <code>false</code> otherwise
	 */
	public boolean isExpired();

	/**
	 * Determines if this issue is pending.
	 *
	 * @return <code>true</code> if this issue is pending; <code>false</code> otherwise
	 */
	public boolean isPending();

	/**
	 * Gets a copy of this issue as an escaped model instance by wrapping it with an {@link com.liferay.portal.kernel.bean.AutoEscapeBeanHandler}.
	 *
	 * @return the escaped model instance
	 * @see com.liferay.portal.kernel.bean.AutoEscapeBeanHandler
	 */
	public Issue toEscapedModel();

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public void setEscapedModel(boolean escapedModel);

	public Serializable getPrimaryKeyObj();

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(Issue issue);

	public int hashCode();

	public String toString();

	public String toXmlString();
}