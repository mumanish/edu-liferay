/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.inkwell.internet.slogan.model.impl;

import com.inkwell.internet.slogan.model.Slogan;
import com.inkwell.internet.slogan.model.SloganModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the Slogan service. Represents a row in the &quot;Slogan_Slogan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.inkwell.internet.slogan.model.SloganModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SloganImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a slogan model instance should use the {@link com.inkwell.internet.slogan.model.Slogan} interface instead.
 * </p>
 *
 * @author Rich Sezov
 * @see SloganImpl
 * @see com.inkwell.internet.slogan.model.Slogan
 * @see com.inkwell.internet.slogan.model.SloganModel
 * @generated
 */
public class SloganModelImpl extends BaseModelImpl<Slogan>
	implements SloganModel {
	public static final String TABLE_NAME = "Slogan_Slogan";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", new Integer(Types.VARCHAR) },
			{ "sloganId", new Integer(Types.BIGINT) },
			{ "sloganDate", new Integer(Types.TIMESTAMP) },
			{ "sloganText", new Integer(Types.VARCHAR) },
			{ "status", new Integer(Types.INTEGER) },
			{ "statusByUserId", new Integer(Types.BIGINT) },
			{ "statusByUserName", new Integer(Types.VARCHAR) },
			{ "statusDate", new Integer(Types.TIMESTAMP) },
			{ "companyId", new Integer(Types.BIGINT) },
			{ "groupId", new Integer(Types.BIGINT) },
			{ "userId", new Integer(Types.BIGINT) }
		};
	public static final String TABLE_SQL_CREATE = "create table Slogan_Slogan (uuid_ VARCHAR(75) null,sloganId LONG not null primary key,sloganDate DATE null,sloganText VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,companyId LONG,groupId LONG,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Slogan_Slogan";
	public static final String ORDER_BY_JPQL = " ORDER BY slogan.sloganId ASC, slogan.sloganDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Slogan_Slogan.sloganId ASC, Slogan_Slogan.sloganDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.inkwell.internet.slogan.model.Slogan"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.inkwell.internet.slogan.model.Slogan"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.inkwell.internet.slogan.model.Slogan"));

	public SloganModelImpl() {
	}

	public long getPrimaryKey() {
		return _sloganId;
	}

	public void setPrimaryKey(long pk) {
		setSloganId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_sloganId);
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getSloganId() {
		return _sloganId;
	}

	public void setSloganId(long sloganId) {
		_sloganId = sloganId;
	}

	public Date getSloganDate() {
		return _sloganDate;
	}

	public void setSloganDate(Date sloganDate) {
		_sloganDate = sloganDate;
	}

	public String getSloganText() {
		if (_sloganText == null) {
			return StringPool.BLANK;
		}
		else {
			return _sloganText;
		}
	}

	public void setSloganText(String sloganText) {
		_sloganText = sloganText;
	}

	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_status = status;
	}

	public long getStatusByUserId() {
		return _statusByUserId;
	}

	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	public Date getStatusDate() {
		return _statusDate;
	}

	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	public Slogan toEscapedModel() {
		if (isEscapedModel()) {
			return (Slogan)this;
		}
		else {
			return (Slogan)Proxy.newProxyInstance(Slogan.class.getClassLoader(),
				new Class[] { Slogan.class }, new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					Slogan.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		SloganImpl sloganImpl = new SloganImpl();

		sloganImpl.setUuid(getUuid());

		SloganModelImpl sloganModelImpl = sloganImpl;

		sloganModelImpl._originalUuid = sloganModelImpl._uuid;

		sloganImpl.setSloganId(getSloganId());

		sloganImpl.setSloganDate(getSloganDate());

		sloganImpl.setSloganText(getSloganText());

		sloganImpl.setStatus(getStatus());

		sloganImpl.setStatusByUserId(getStatusByUserId());

		sloganImpl.setStatusByUserName(getStatusByUserName());

		sloganImpl.setStatusDate(getStatusDate());

		sloganImpl.setCompanyId(getCompanyId());

		sloganModelImpl._originalCompanyId = sloganModelImpl._companyId;

		sloganModelImpl._setOriginalCompanyId = false;
		sloganImpl.setGroupId(getGroupId());

		sloganModelImpl._originalGroupId = sloganModelImpl._groupId;

		sloganModelImpl._setOriginalGroupId = false;
		sloganImpl.setUserId(getUserId());

		return sloganImpl;
	}

	public int compareTo(Slogan slogan) {
		int value = 0;

		if (getSloganId() < slogan.getSloganId()) {
			value = -1;
		}
		else if (getSloganId() > slogan.getSloganId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getSloganDate(), slogan.getSloganDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Slogan slogan = null;

		try {
			slogan = (Slogan)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = slogan.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", sloganId=");
		sb.append(getSloganId());
		sb.append(", sloganDate=");
		sb.append(getSloganDate());
		sb.append(", sloganText=");
		sb.append(getSloganText());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.inkwell.internet.slogan.model.Slogan");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sloganId</column-name><column-value><![CDATA[");
		sb.append(getSloganId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sloganDate</column-name><column-value><![CDATA[");
		sb.append(getSloganDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sloganText</column-name><column-value><![CDATA[");
		sb.append(getSloganText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private String _uuid;
	private String _originalUuid;
	private long _sloganId;
	private Date _sloganDate;
	private String _sloganText;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private transient ExpandoBridge _expandoBridge;
}